SETUP
Configuring user information used across all local repositories
git config --global user.name “[firstname lastname]”
set a name that is identifiable for credit when review version history
git config --global user.email “[valid-email]”
set an email address that will be associated with each history marker
git config --global color.ui auto
set automatic command line coloring for Git for easy reviewing

SETUP & INIT
Configuring user information, initializing and cloning repositories
git init
initialize an existing directory as a Git repository
git clone [url]
retrieve an entire repository from a hosted location via URL

STAGE & SNAPSHOT
Working with snapshots and the Git staging area
git status
show modified files in working directory, staged for your next commit
git add [file]
add a file as it looks now to your next commit (stage)
git reset [file]
unstage a file while retaining the changes in working directory
git diff
diff of what is changed but not staged
git diff --staged
diff of what is staged but not yet committed
git commit -m “[descriptive message]”
commit your staged content as a new commit snapshot

BRANCH & MERGE
Isolating work in branches, changing context, and integrating changes
git branch
list your branches. a * will appear next to the currently active branch
git branch [branch-name]
create a new branch at the current commit
git checkout
switch to another branch and check it out into your working directory
git merge [branch]
merge the specified branch’s history into the current one
git log
show all commits in the current branch’s history

INSPECT & COMPARE
Examining logs, diffs and object information
git log
show the commit history for the currently active branch
git log branchB..branchA
show the commits on branchA that are not on branchB
git log --follow [file]
show the commits that changed file, even across renames
git diff branchB...branchA
show the diff of what is in branchA that is not in branchB
git show [SHA]
show any object in Git in human-readable format

TRACKING PATH CHANGES
Versioning file removes and path changes
git rm [file]
delete the file from project and stage the removal for commit
git mv [existing-path] [new-path]
change an existing file path and stage the move
git log --stat -M
show all commit logs with indication of any paths that moved 

IGNORING PATTERNS
Preventing unintentional staging or commiting of files
logs/
*.notes
pattern*/
git config --global core.excludesfile [file]
system wide ignore pattern for all local repositories
Save a file with desired patterns as .gitignore with either direct string
matches or wildcard globs

SHARE & UPDATE
Retrieving updates from another repository and updating local repos
git remote add [alias] [url]
add a git URL as an alias
git fetch [alias]
fetch down all the branches from that Git remote
git merge [alias]/[branch]
merge a remote branch into your current branch to bring it up to date
git push [alias] [branch]
Transmit local branch commits to the remote repository branch
git pull
fetch and merge any commits from the tracking remote branch

REWRITE HISTORY
Rewriting branches, updating commits and clearing history
git rebase [branch]
apply any commits of current branch ahead of specified one
git reset --hard [commit]
clear staging area, rewrite working tree from specified commit

EMPORARY COMMITS
Temporarily store modified, tracked files in order to change branches
git stash
Save modified and staged changes
git stash list
list stack-order of stashed file changes
git stash pop
write working from top of stash stack
git stash drop
discard the changes from top of stash stack

Global Flags (Common Across Commands)

    -h or --help: Show help for a specific Git command.
    --version: Display the installed Git version.
    --quiet: Suppress output.
    --verbose: Provide detailed output.
    --no-pager: Show output directly without a pager.

Flags by Git Command
1. git init

    --bare: Create a bare repository without a working directory.
    --template=<path>: Specify a template directory for repository initialization.

2. git clone

    --depth=<depth>: Perform a shallow clone with a specific history depth.
    --branch=<name>: Clone a specific branch.
    --single-branch: Clone only the specified branch.
    --recurse-submodules: Clone submodules automatically.

3. git add

    -n or --dry-run: Show what would be added without actually adding.
    -p or --patch: Interactively choose changes to stage.

4. git commit

    -m <message>: Add a commit message.
    --amend: Modify the previous commit.
    -a or --all: Stage all tracked changes before committing.
    --no-edit: Skip editing the commit message when amending.

5. git status

    -s or --short: Show output in a compact, short format.
    -b or --branch: Show the branch name and tracking info.

6. git log

    --oneline: Show each commit in a single line.
    --graph: Display a graph of commits.
    --stat: Show statistics for file changes.
    -p or --patch: Show patch details of changes.
    --since=<date> or --after=<date>: Show commits after a specific date.
    --until=<date> or --before=<date>: Show commits before a specific date.
    --author=<name>: Filter commits by author.
    --grep=<text>: Search commit messages for specific text.

7. git diff

    --cached: Show changes staged for the next commit.
    --stat: Show statistics for differences.
    -w or --ignore-all-space: Ignore whitespace changes.

8. git checkout

    -b <branch>: Create and switch to a new branch.
    --force: Discard local changes.

9. git branch

    -d <branch>: Delete a branch.
    -D <branch>: Force-delete a branch.
    -m <new-name>: Rename a branch.
    -r: Show remote branches.

10. git push

    --force or -f: Force push changes.
    --tags: Push all tags.
    --set-upstream: Set the upstream branch.

11. git pull

    --rebase: Rebase instead of merging.
    --no-commit: Merge without committing.

12. git merge

    --no-ff: Create a merge commit even when fast-forward is possible.
    --squash: Squash commits into one.
    --abort: Abort a conflicted merge.

13. git fetch

    --prune: Remove branches that no longer exist on the remote.
    --all: Fetch all remotes.

14. git reset

    --soft: Reset HEAD only; leave working directory as is.
    --mixed: Reset index and HEAD, but not working directory (default).
    --hard: Reset index, HEAD, and working directory.

15. git rebase

    -i or --interactive: Interactive rebase.
    --continue: Continue a paused rebase.
    --abort: Abort a rebase.

16. git stash

    -u or --include-untracked: Include untracked files.
    -a or --all: Include all files, including ignored ones.
    --list: List stashed changes.
    --pop: Apply and remove stashed changes.
    --apply: Apply stashed changes without removing them.

17. git tag

    -a <tag>: Annotate a tag.
    -d <tag>: Delete a tag.
    -l <pattern>: List tags matching a pattern.

18. git remote

    -v: Show remote URLs.
    add <name> <url>: Add a new remote.
    remove <name>: Remove a remote.

Advanced Flags

    --recurse-submodules: Work with submodules (in clone, pull, etc.).
    --squash: Squash changes in merge or cherry-pick.
    --no-verify: Skip hooks during commit, push, etc.