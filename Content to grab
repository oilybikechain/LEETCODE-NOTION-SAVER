This is my complete extension, explain each line of code in detail and suggest and implement improvements to the code.
manifest.json
{
  "manifest_version": 2,
  "name": "LeetNotion Sync",
  "version": "1.0",
  "description": "Save completed LeetCode problems to Notion.",
  "icons": {
    "48": "icons/icon48.png",
    "96": "icons/icon96.png",
    "128": "icons/icon128.png"
  },
  "permissions": [
    "activeTab",
    "storage",
    "https://leetcode.com/*",
    "https://api.notion.com/*"
  ],
  "browser_action": {
    "default_icon": {
      "48": "icons/icon48.png",
      "96": "icons/icon96.png"
    },
    "default_title": "LeetNotion Sync",
    "default_popup": "popup.html"
  },
  "content_scripts": [
  {
    "matches": ["https://leetcode.com/*/*/*/"],
    "js": ["content.js"],
    "run_at": "document_end" 
  }
  ],
  "background": {
    "scripts": ["background.js"]
  }
}

popup.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>LeetNotion Sync</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div class="tab-container">
    <button class="tab-button" data-tab="save-tab">Save Problem</button>
    <button class="tab-button" data-tab="settings-tab">Settings</button>
    <button class="tab-button" data-tab="info-tab">Information</button>
  </div>

  <!-- Save Problem Tab -->
  <div id="save-tab" class="tab-content active">
    <h2>Save Problem to Notion</h2>

    <!-- 1. User Difficulty -->
    <label>Perceived difficulty:</label>
    <div class="difficulty-container">
      <div class="difficulty-box" id="Easy" data-value="Easy">Easy</div>
      <div class="difficulty-box" id="Medium" data-value="Medium">Medium</div>
      <div class="difficulty-box" id="Hard" data-value="Hard">Hard</div>
    </div>

    <!-- Hidden input to store selected difficulty -->
    <input type="hidden" id="selected-difficulty" value="">

    <!-- 2. Alternative Methods -->
    <label for="alternative-methods">Alternative Methods:</label>
    <textarea id="alternative-methods" rows="2" placeholder="Describe alternative approaches..."></textarea>

    <!-- 3. Remarks -->
    <label for="remarks">Remarks:</label>
    <textarea id="remarks" rows="2" placeholder="Any additional comments..."></textarea>

    <!-- 4. Correct? (Checkbox) -->
    <div class="checkbox-container">
      <input type="checkbox" id="correct">
      <label for="correct">Solved?</label>
    </div>

    <!-- 5. Worth Reviewing? (Checkbox) -->
    <div class="checkbox-container">
      <input type="checkbox" id="worth-reviewing">
      <label for="worth-reviewing">Worth Reviewing?</label>
    </div>

    <!-- Save Button -->
    <button id="save-btn">Save to Notion</button>
  </div>

  <!-- Settings Tab -->
  <div id="settings-tab" class="tab-content">
    <h2>Settings</h2>

    <!-- Notion API Key Input -->
    <label for="notion-api-key">Notion API Key:</label>
    <input type="text" id="notion-api-key" placeholder="Enter your Notion API key">

    <!-- Notion Database ID Input -->
    <label for="notion-database-id">Notion Database ID:</label>
    <input type="text" id="notion-database-id" placeholder="Enter your Notion Database ID">

    <!-- Save Settings Button -->
    <button id="save-settings-btn">Save Settings</button>

    <!-- Display Saved Settings -->
    <div id="saved-settings">
      <h3>Saved Settings</h3>
      <p><strong>API Key:</strong> <span id="display-api-key"></span></p>
      <p><strong>Database ID:</strong> <span id="display-database-id"></span></p>
    </div>
  </div>

  <!-- Information Tab -->
  <div id="info-tab" class="tab-content">
    <h2>Information</h2>
    <p>Welcome to LeetNotion Sync! Here are some useful links:</p>
    <ul>
      <li><a href="https://developers.notion.com/" target="_blank">Notion API Documentation</a></li>
      <li><a href="https://leetcode.com/" target="_blank">LeetCode</a></li>
      <li><a href="https://github.com/your-repo" target="_blank">GitHub Repository</a></li>
    </ul>
  </div>

  <script src="popup.js"></script>
</body>
</html>

styles.css
/* General Body Styles */
body {
  font-family: Arial, sans-serif;
  width: 300px;
  padding: 10px;
  background-color: rgb(58, 58, 58); /* Black background */
  color: white; /* White text */
}

/* Tab Container */
.tab-container {
  display: flex;
  justify-content: space-between;
  margin-bottom: 10px;
}

.tab-button {
  flex: 1;
  padding: 10px;
  text-align: center;
  border: none;
  background-color: #333; /* Dark gray for buttons */
  color: white; /* White text */
  cursor: pointer;
  transition: background-color 0.3s;
  font-weight: bold
}

.tab-button:hover {
  background-color: #555; /* Lighter gray on hover */
}

.tab-button.active {
  background-color: #007bff; /* Blue for active tab */
  color: white;
}

/* Tab Content */
.tab-content {
  display: none;
}

.tab-content.active {
  display: block;
}

/* Difficulty Boxes */
.difficulty-container {
  display: flex;
  justify-content: space-between;
  margin-top: 10px;
}

.difficulty-box {
  flex: 1;
  padding: 10px;
  text-align: center;
  border: 2px solid #555; /* Dark gray border */
  border-radius: 5px;
  cursor: pointer;
  margin: 0 5px;
  font-weight: bold;
  background-color: #333; /* Dark gray background */
  color: white; /* White text */
  transition: background-color 0.3s, border-color 0.3s;
}

.difficulty-box.selected {
  background-color: #28a745; /* Green when selected */
  color: white;
  border-color: #1e7e34;
}

/* Labels and Inputs */
label {
  display: block;
  margin-top: 15px;
  font-weight: bold;
  color: white; /* White text */
}

input[type="text"],
textarea {
  width: 100%;
  margin-top: 5px;
  padding: 5px;
  border-radius: 5px;
  border: 1px solid #555; /* Dark gray border */
  background-color: #333; /* Dark gray background */
  color: white; /* White text */
}

/* Checkboxes */
.checkbox-container {
  display: flex;
  align-items: center;
  margin-top: 10px;
}

.checkbox-container input {
  width: auto;
  margin-right: 10px;
}

.checkbox-container label {
  color: white; /* White text */
}

/* Buttons */
button {
  width: 100%;
  margin-top: 15px;
  padding: 8px;
  background-color: #007bff; /* Blue background */
  color: white; /* White text */
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3; /* Darker blue on hover */
}

/* Saved Settings */
#saved-settings {
  margin-top: 20px;
}

#saved-settings h3 {
  margin-bottom: 10px;
  color: white; /* White text */
}

#saved-settings p {
  margin: 5px 0;
  color: white; /* White text */
}

/* Links in Information Tab */
#info-tab a {
  color: #007bff; /* Blue links */
  text-decoration: none;
}

#info-tab a:hover {
  text-decoration: underline;
}

popup.js
document.addEventListener("DOMContentLoaded", () => {
  const difficultyBoxes = document.querySelectorAll(".difficulty-box");
  const selectedDifficulty = document.getElementById("selected-difficulty");
  const tabButtons = document.querySelectorAll(".tab-button");
  const tabContents = document.querySelectorAll(".tab-content");

  // Tab Switching Logic
  tabButtons.forEach(button => {
    button.addEventListener("click", () => {
      const tabName = button.getAttribute("data-tab");

      // Hide all tab contents
      tabContents.forEach(content => content.classList.remove("active"));

      // Show the selected tab content
      document.getElementById(tabName).classList.add("active");

      // Highlight the active tab button
      tabButtons.forEach(btn => btn.classList.remove("active"));
      button.classList.add("active");
    });
  });

  // Difficulty Selection Logic
  difficultyBoxes.forEach(box => {
    box.addEventListener("click", () => {
      // Remove "selected" class from all boxes
      difficultyBoxes.forEach(b => b.classList.remove("selected"));

      // Add "selected" class to the clicked box
      box.classList.add("selected");

      // Store selected value
      selectedDifficulty.value = box.getAttribute("data-value");
    });
  });

  // Save Problem Button Logic
  document.getElementById("save-btn").addEventListener("click", async () => {
    const data = {
      difficulty: selectedDifficulty.value,
      alternativeMethods: document.getElementById("alternative-methods").value,
      remarks: document.getElementById("remarks").value,
      correct: document.getElementById("correct").checked,
      worthReviewing: document.getElementById("worth-reviewing").checked,
    };

    try {
      const response = await browser.runtime.sendMessage({
        action: "saveToNotion",
        data: data,
      });
      console.log("Response from background script:", response);
      alert("Problem saved to Notion successfully!");
    } catch (error) {
      console.error("Error sending data to background script:", error);
      alert("Failed to save problem to Notion.");
    }
  });

  // Save Settings Button Logic
  document.getElementById("save-settings-btn").addEventListener("click", async () => {
    const notionApiKey = document.getElementById("notion-api-key").value;
    const notionDatabaseId = document.getElementById("notion-database-id").value;

    try {
      await browser.storage.local.set({ notionApiKey, notionDatabaseId });
      alert("Settings saved successfully!");
      displaySavedSettings();
    } catch (error) {
      console.error("Error saving settings:", error);
      alert("Failed to save settings.");
    }
  });

  // Display Saved Settings
  async function displaySavedSettings() {
    const { notionApiKey, notionDatabaseId } = await browser.storage.local.get(["notionApiKey", "notionDatabaseId"]);
    document.getElementById("display-api-key").textContent = notionApiKey || "Not set";
    document.getElementById("display-database-id").textContent = notionDatabaseId || "Not set";
  }

  // Load Saved Settings on Page Load
  displaySavedSettings();
});

content.js
console.log("Content script loaded!");

window.addEventListener('load', () => {
  console.log("Page is fully loaded!");
});

// Define an asynchronous function to fetch problem data from LeetCode
async function fetchSiteData() {
  // 🔹 Get the current page URL
  const currentUrl = window.location.href;

  // 🔹 Extract the problem "slug" (e.g., "two-sum") from the URL
  // Example: "https://leetcode.com/problems/two-sum/" → Extract "two-sum"
  const problemSlug = currentUrl.split('/')[4]; 

  // 🔹 Construct the description page URL (for debugging/logging purposes)
  const descriptionUrl = `https://leetcode.com/problems/${problemSlug}/description/`;
  console.log("Description Page URL:", descriptionUrl);

  // 🔹 Define the GraphQL query to request problem data
  const graphqlQuery = {
    query: `
      query questionData($titleSlug: String!) {
        question(titleSlug: $titleSlug) {
          title   
          difficulty 
          topicTags {
            name 
          }
        }
      }
    `,
    variables: {
      titleSlug: problemSlug, // Use extracted problem slug dynamically
    },
  };

  try {
    // 🔹 Send a POST request to LeetCode's GraphQL API
    const response = await fetch("https://leetcode.com/graphql", {
      method: "POST", // Sending data to the API
      headers: {
        "Content-Type": "application/json", // JSON request format
      },
      body: JSON.stringify(graphqlQuery), // Convert query to JSON
    });

    // 🔹 Convert the response to JSON format
    const data = await response.json();
    console.log("Fetched Data:", data);

    // 🔹 Extract the relevant problem details from API response
    const problemTitle = data.data.question.title; // Get problem name
    const difficulty = data.data.question.difficulty; // Get difficulty level
    const tags = data.data.question.topicTags.map(tag => tag.name); // Extract topic tags

    // 🔹 Log extracted data
    console.log("Problem Title:", problemTitle);
    console.log("Difficulty:", difficulty);
    console.log("Tags:", tags);

    // 🔹 Return the extracted problem data as an object
    return {
      QuestionLink: descriptionUrl,
      Question: problemTitle,
      difficulty: difficulty,
      tags: tags,
      Solution: currentUrl,
    };

  } catch (error) {
    // 🔹 Handle errors if the request fails
    console.error("Error fetching problem data:", error);
    return null; // Return null if an error occurs
  }
}

// Send the extracted data to the background script
async function sendProblemDataToBackground() {
  const problemData = await fetchSiteData();

  browser.runtime.sendMessage({
    action: 'problemData',
    data: problemData,
  }).then((response) => {
    console.log('Data sent successfully:', response);
  }).catch((error) => {
    console.error('Error sending data:', error);
  });
}

// Run the script on page load
window.addEventListener('load', () => {
  sendProblemDataToBackground();
});

background.js
let problemData = null;
console.log("Background script loaded!");

// Function to get stored Notion API key and database ID
async function getNotionCredentials() {
  const { notionApiKey, notionDatabaseId } = await browser.storage.local.get(["notionApiKey", "notionDatabaseId"]);
  if (!notionApiKey || !notionDatabaseId) {
    console.error("Notion API key or Database ID not found. Please set them in the extension settings.");
    return null;
  }
  return { notionApiKey, notionDatabaseId };
}

// Listen for messages from the content script
browser.runtime.onMessage.addListener((message, sender, sendResponse) => {
  console.log("Message received in background script:", message);

  if (message.action === "problemData") {
    console.log("Problem Data Received:", message.data);
    problemData = message.data; // Store problem data
    sendResponse({ status: "success" });
  }

  if (message.action === "saveToNotion") {
    console.log("Popup Data Received:", message.data);

    if (!problemData) {
      console.error("Error: No problem data available.");
      sendResponse({ status: "error", error: "No problem data available. Try refreshing the page." });
      return true;
    }

    // Format the data correctly
    const formattedData = {
      Done: message.data.correct ? true : false,
      "Question": problemData["Question"] || "Untitled", // FIXED: Correctly referencing problem title
      "QuestionLink": problemData["QuestionLink"] || "", // FIXED: Ensure consistency in naming
      "Tag": Array.isArray(problemData.tags) ? problemData.tags : [], // Ensure array format
      "Level": problemData.difficulty || "Unknown",
      "My expertise": message.data.difficulty || "", 
      "Alternative methods": message.data.alternativeMethods || "",
      "Remarks": message.data.remarks || "",
      "Solution link": problemData.Solution || "",
      "Worth reviewing?": message.data.worthReviewing ? true : false,
    };

    console.log("Formatted Data to Save:", formattedData);

    getNotionCredentials().then(credentials => {
      if (!credentials) {
        sendResponse({ status: "error", error: "Notion API credentials missing." });
        return;
      }

      const { notionApiKey, notionDatabaseId } = credentials;
      addEntryToNotionDatabase(formattedData, notionApiKey, notionDatabaseId)
        .then(response => sendResponse(response))
        .catch(error => sendResponse({ status: "error", error: error.message }));
    });

    return true; // Keep the message channel open for async response
  }
});

// Function to add an entry to the Notion database
async function addEntryToNotionDatabase(data, notionApiKey, databaseId) {
  const response = await fetch("https://api.notion.com/v1/pages", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${notionApiKey}`,
      "Content-Type": "application/json",
      "Notion-Version": "2022-06-28",
    },
    body: JSON.stringify({
      parent: {
        type: "database_id",
        database_id: databaseId
      },
      properties: {
        "Question": { title: [{ text: { content: data["Question"] } }] }, // FIXED: Correct key usage
        "Question Link": { url: data["QuestionLink"] }, // FIXED: Consistent key usage
        "Done": { checkbox: data.Done },
        "Tag": { multi_select: data.Tag.map(tag => ({ name: tag })) },
        "Level": { select: { name: data.Level } },
        "My Expertise": { select: { name: data["My expertise"] } },
        "Alternative Method": { multi_select: data["Alternative methods"].split(", ").map(method => ({ name: method })) },
        "Remarks": { rich_text: [{ text: { content: data.Remarks } }] },
        "My Solution Link": { url: data["Solution link"] },
        "Worth reviewing?": { checkbox: data["Worth reviewing?"] },
      },
    }),
  });
  console.log("Final Data Sent to Notion:", JSON.stringify(data, null, 2));

  if (!response.ok) {
    const error = await response.json();
    console.error("Failed to update Notion database:", error);
    return { status: "error", error: error.message };
  }

  console.log("✅ Successfully added entry to Notion database!");
  return { status: "success" };
}
